
Biljke:
a)
ID - NUMBER
NAZIV - STRING
SLIKA - STRING
    # Get the image
    image = open(path, 'rb')
    image_read = image.read()

    # Get the Byte-Version of the image
    image_64_encode = base64.b64encode(image_read)

    # Convert it to a readable utf-8 code (a String)
    image_encoded = image_64_encode.decode('utf-8')

    return image_encoded
NJEGA STRING
b)
1. insert nove biljke
2. update biljke(id)
3. delete biljke (id)


Posude:
a)
ID - NUMBER
NAZIV_LOKACIJE - STRING
ID_BILJKE - NUMBER - DEFAULT NULL("Prazna Posuda")
VLAGA_ZEMLJE - NUMBER
pH_ZEMLJE - NUMBER
RAZINA_SVJETLA - STRING
TEMP_ZRAKA
VRIJEME_AZURIRANJA

b)
1. napuni posudu (insert u posudu)
    1.1. dohvati podatke sa senzora (vlage, ph, svjetla)
2. popis posuda( filter po puna/ prazna, default = puna)
    klikom na posudu otvara se:
3. podaci o posudi(id_posude)
4. promjena statusa posude:
    delete posude,
    update posude(id_biljke)
Korisnici:
a)
ID - NUMBER
IME - STRING
PREZIME - STRING
USERNAME - STRING
PASSWORD - STRING

pomoc:
def editObject(object_id, **kwargs):

    object = session.query(Object).filter_by(id = object_id).one()

    for attr, value in kwargs.iteritems():
        if value:
            setattr(object, attr, value)

    session.add(object)
    session.commit()


import base64

with open("yourfile.ext", "rb") as image_file:
    encoded_string = base64.b64encode(image_file.read())

import cStringIO
import PIL.Image

# assume data contains your decoded image
file_like = cStringIO.StringIO(data)

img = PIL.Image.open(file_like)
img.show()    